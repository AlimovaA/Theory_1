===============================
Тестирование программного обеспечения 
- это процесс исследования ПО с целью получения информации о качестве продукта;
- процесс проверки соответствия заявленных к продукту требований и реально реализованной функциональности, осуществляемой путем наблюдения за его работой в искусственно созданных ситуациях на ограниченном наборе тестов, выбранным определенным образом;
- оценка системы с тем, чтобы найти различия с тем, какой система должна быть и тем, какой она есть.

В широком смысле, тестирование - одна из техник контроля качества (Quality Control), которая включает в себя планирование, составление тестов, непосредственно выполнение тестирования и анализ полученных результатов.

Цели тестирования ПО
- Предоставление информации о качестве ПО заказчику;
- Повышение качества ПО;
- Предотвращение появления дефектов.

Задача тестирования - поиск дефектов.

Качество ПО - это способность программного продукта, при заданных условиях удовлетворять установленные и предполагаемые потребности.
===============================
Принципы тестирования
Принцип 1 - Тестирование демонстрирует наличие дефектов (Testing shows presence of defects). Тестирование может показать, что дефекты присутствуют, но не может доказать, что их нет. Тестирование снижает вероятность наличия дефектов, находящихся в программном обеспечении, но, даже если дефекты не были обнаружены, это не доказывает его корректности.
Принцип 2 - Исчерпывающее тестирование недостижимо (Exhaustive testing is impossible). Полное тестирование с использованием всех комбинаций вводов и предусловий физически невыполнимо, за исключением тривиальных случаев. Вместо исчерпывающего тестирования должны использоваться анализ рисков и расстановка приоритетов, чтобы более точно сфокусировать усилия по тестированию.
Принцип 3 - Ранее тестирование (Early testing) Чтобы найти дефекты как можно раньше, активности по тестированию должны быть начаты как можно раньше в жизненном цикле разработки программного обеспечения или системы, и должны быть сфокусированы на определенных целях.
Принцип 4 - Скопление дефектов (Defects clustering) Усилия тестирования должны быть сосредоточены пропорционально ожидаемой, а позже реальной плотности дефектов по модулям. Как правило, большая часть дефектов, обнаруженных при тестировании или повлекших за собой основное количество сбоев системы, содержится в небольшом количестве модулей.
Принцип 5 - Парадокс пестицида (Pesticide paradox) Если одни и те же тесты будут прогоняться много раз, в конечном счете этот набор тестовых сценариев больше не будет находить новых дефектов. Чтобы преодолеть этот "парадокс пестицида", тестовые сценарии должны регулярно рецензироваться и корректироваться, новые тесты должны быть разносторонними, чтобы охватить все компоненты программного обеспечения, или системы, и найти как можно больше дефектов.
Принцип 6 - Тестирование зависит от контекста (Testing is concept depending) Тестирование выполняется по-разному в зависимости от контекста. Например, программное обеспечение, в котором критически важна безопасность, тестируется иначе, чем сайт электронной коммерции.
Принцип 7 - Заблуждение об отсутствии ошибок (Absence-of-errors fallacy) Обнаружение и исправление дефектов не помогут, если созданная система не подходит пользователю и не удовлетворяет его ожиданиям и потребностям.
===============================
SDLC(Software Development Life Cycle) - жизненный цикл разработки ПО 
- это процесс, направленный на создание и поддержание работоспособности, качества и надежности программного обеспечения;
а так же
- это условная схема, включающая отдельные этапы, которые представляют стадии процесса создания ПО.

6 основных фаз, через которые проходит любая программная система.
1. Анализ требований
- формируются цели и задачи проекта;
- определяются сроки и стоимость разработки ПО;
- анализ и формирование требований заказчика;
- формируется и подписывается техническое задание на разработку ПО.
Ответственные роли: manager-менеджер, BA-бизнес-аналитик, developer-разработчик, QA-тестировщики-тестируют требования.

2. Проектирование/Архитектура
- выбор технологий и яп;
- назначаются требования к пользовательскому интерфейсу;
- определяется наиболее подходящая СУБД;
- назначаются требования к аппаратному обеспечению;
- выбирается архитектура системы;
Ответственные роли: solution architect-архитектор, developer-разработчик.

3. Разработка и реализация
- разработка с помощью различных технологий и яп;
- создание прототипа и рабочей версии продукта.
Ответственные роли: developer.

4. Тестирование
- проверка продукта на соответсвие требованиям и нуждам заказчика;
- поиск и регистрация дефектов.
Ответственные роли: тестировщик.

5. Выпуск/Релиз
- установка системы;
- эксплуатация.
Ответственные роли: dev ops, manager, developer.

6. Поддержка/Support
- поддержка пользователей;
- исправление дефектов;
- реализация нового функционала;
- изменение существующего функционала.
Ответственные роли: специалисты тех. поддержки, manager, developer.
===============================
Тестирование - это самый нижний и первый уровень, который представляет собой проверку создаваемого программного продукта на соответствие требований к этому продукту. Т.е. выдают перечень функциональности, мы находим и описываем дефекты, передаем разработчику, разработчик должен пофиксить их и предоставить нам на проверку. Основная задача тестирования - выявить и зафиксировать дефект.
QC Qualiti Control - контроль качества, включает в себя тестирование,но не ограничивается только им. QC обеспечивает не только проверку продукта на соответствие требованиям, но и соответствие заранее согласованному уровню качества продукта и готовность выпуска продукта в продакшн. Основная задача - предоставить объективную картину того, что происходит с качеством продукта на разных этапах разработки.
QA Quality Assurance - обеспечение качества - включает в себя мероприятия на всех этапах разработки. Основная задача - выстроить систему, которая будет превентивно работать на качество продукта, т.е. предупреждать какие-то дефекты, либо наладить процессы так,чтобы эти дефекты были найдены как можно раньше.
Таким образом, мы можем построить модель иерархии процессов обеспечения качества.
Тестирование является частью QC, QC - частью QA.
Различия
Quality Assurance обеспечивает правильность и предсказуемость процесса, в то время как Quality Control предполагает контроль соблюдений требований. Тестирование же в свою очередь, обеспечивает сбор статистических данных и внесение их в документы, созданные в рамках QC-процесса.
===============================
Матрица соответсвия требований (Requirements Traccability Matrix) - это двумерная таблица соответствия функциональных требований продукта и подготовленных тестовых сценариев. В загаловках колонок таблицы расположены требования, а в заголовках строк - тестовые сценарии. На пересечении - отметка, означающая, что требование текущей колонки покрыто тестовым сценарием текущей строки.
===============================
Верификация (Verification) - это статическая практика проверки 
документов, дизайны, архитектуры, кода и т.д. Процесс верификации 
происходит без запуска кода. Отвечает на вопрос "Делаем ли мы 
правильно?" Эта проверка связана с тем, что мы убеждаемся с тем, что 
система хорошо спроектирована и безошибочна. Верификация происходит 
всегда до валидации. 
Пример верификации:
1. Верификация покажет нам выполнен ли автомобиль из соответствующих спецификации материалов, подогнаны ли детали по высоте, установлен ли заявленный двигатель, т.е. все то, что было прописано в спецификации.
2. Есть форма для логина в систему. Согласно спеки размер поля строго установлен. Мы проверяем так ли это. Например размер поля 16 пикселей. Если это так, то это процесс верификации.
Валидация (Validation) - процесс оценки конечного продукта, когда необходимо проверить соответствует ли программное обеспечение ожиданиям и требованиям клиента. Динамический процесс, т.е. этот процесс всегда включает запуск кода программы. Отвечает на вопрос "Делаем ли мы правильный продукт?". 
Пример валидации:
1. Валидация покажет нам сможет ли пользоваться автомобилем невысокий человек, вообще поедет ли автомобиль, удобно ли выполнены сидения, поместится ли в багажнике огромный чемода, т.е. насколько наш продукт будет отвечать нуждам нашего пользователя.
2. Если оставим поле с логиным пустым и нажмем кнопку "войти". Система покажет ошибку, т.е. сработает валидация, т.к. поле должно быть заполнено.
Изучив 2 примера, мы можем прийти к выводу. При верификации проверяется наличие чего-нибудь, а при валидации работоспособность чего-нибудь.
================================
Тест план - документ, который описывает весь объем работ по тестированию, начиная с описания объекта, стратегии, критериев начала и окончания тестирования, до необходимого в процессе работы оборудования, специальных знаний, оценка рисков.
Чек-лист - документ, который описывает что должно быть протестировано. Чек-лист содержит только действия, без ожидаемого результата, чек-лист менее формализован.
Тест-кейс - это артефакт, описывающий совокупность шагов, конкретных условий и параметров, необходимых для проверки реализации тестируемой функции или её части.
================================
=
По позитивности:
- Позитивное тестирование - тестирование, когда применяются сценарии, которые соответсвуют нормальному ожидаемому поведению системы (на примере калькулятора 2+2=4)
- Негативное тестирование - внештатное поведеие системы (на примере калькулятора деление на 0, мы должны получить сообщение об ошибке)
=
По степени важности:
- Smoke тестирование - проводится на начальном этапе, либо после нового билда (промежуточная версия продукта), направленно на проверку готовности разрабатываемого продукта к проведению расширенного тестирования и определения общего состояния качества продукта - проверка>
- Тест критического пути - проверка на правильность работы при стандартном использовании (типичный пользователь выполняет свои типичные задачи) - проверяется основная масса требований к продукту -> например, выбор шрифта, возможность набора текста, вставка картинок и т.>
- Расширенное тестирование - проверка нестандартного использования программного продукта (например, спецсимволы в поле логина, либо нелогично кликать по клавищам, работа на многих вкладках одновременно, т.е. максимально загрузить систему)

 
